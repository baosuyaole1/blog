import{_ as s,o as n,c as a,N as l}from"./chunks/framework.5b6ea098.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"view/vue3源码解析/vue3框架设计的基本概念.md"}'),p={name:"view/vue3源码解析/vue3框架设计的基本概念.md"},e=l(`<h3 id="编程范式" tabindex="-1">编程范式 <a class="header-anchor" href="#编程范式" aria-label="Permalink to &quot;编程范式&quot;">​</a></h3><blockquote><p>针对于目前的前端开发而言，主要存在两种 <code>编程范式</code>，这两种<code>范式</code>一般是相对来说的。</p><ol><li>命令式编程</li><li>声明式编程</li></ol></blockquote><h4 id="命令式编程" tabindex="-1">命令式编程 <a class="header-anchor" href="#命令式编程" aria-label="Permalink to &quot;命令式编程&quot;">​</a></h4><p>那么首先我们先来说什么叫做<code>命令式</code></p><p>具体例子：</p><p>张三的妈妈让张三去买酱油</p><p>那么张三怎么做呢？</p><ol><li>张三拿起钱</li><li>打开门</li><li>下了楼</li><li>到商店</li><li>拿钱买酱油</li><li>回到家</li></ol><p>以上的流程详细的描述了，张三在买酱油的过程中，每一步都做了什么。那么这样一种：<code>详细描述做事过程</code> 的方式就可以被称为 <code>命令式</code>。</p><p>那么如果把这样的方式放到具体的代码实现之中，又应该怎么做呢？</p><p>我们来看一下这样的一个事情：</p><blockquote><p>在指定的div中展示”hello world“</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//html 部分</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//js 部分</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//获取div</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> divEle</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//为该div设置innerHTMl为hello world</span></span>
<span class="line"><span style="color:#A6ACCD;">divEle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>改代码虽然只有两步，但是它清除的描述了：<code>完成这件事情，所需要经历的过程</code></p><p>那么假设我们所做的事情，变得更加复杂了，则整个过程也会变得更加复杂。</p><p>比如：</p><blockquote><p>为指定的的div的子元素的子元素p标签，展示变量msg</p></blockquote><p>那么通过命令式完成以上功能，则会得出如下逻辑与代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//html 部分</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//js部分</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1.获取到第一层的 div</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> divEle</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 获取它的子 div</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> subDivEle</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">divEle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. 获取第三层的 p</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> subPEle</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">subDivEle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 4. 定义变量msg</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 5. 为该 p 元素设置innerHtML 为 hello world</span></span>
<span class="line"><span style="color:#A6ACCD;">subPEle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHtML</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">msg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>那么通过以上的例子，相信大家可以对命令式的概念有了一个基础的认识。</p><p>最后做一个总结，什么叫做命令式呢？</p><p>命令式是：<code>关注过程</code>的一种编程范式，他描述了完成一个功能的<code>详细逻辑与步骤</code>。</p><h4 id="声明式编程" tabindex="-1">声明式编程 <a class="header-anchor" href="#声明式编程" aria-label="Permalink to &quot;声明式编程&quot;">​</a></h4><p>针对于声明式而言，大家其实都是非常熟悉的了。</p><p>比如以下代码，就是一个典型的<code>声明式</code>：</p><div class="language-HTML line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{msg}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对于这个代码，大家是不是感觉有些熟悉？</p><p>没错就是<code>vue</code>中非常常见的双大括号语法。所以当我们写vue<code>模板语法</code>的时候、其实一直写的就是<code>声明式</code>编程。</p><p>那么声明式编程具体指的是什么意思呢？</p><p>还是已刚才的例子为例：</p><p>张三的妈妈让张三去买酱油</p><p>那么张三怎么做呢？</p><ol><li>张三拿起钱</li><li>打开门</li><li>下了楼</li><li>到商店</li><li>拿钱买酱油</li><li>回到家</li></ol><p>在这个例子中，我们说：张三所做的事情就是命令式，那么张三的妈妈所做的就是事情就是<code>声明式</code>。</p><p>在这样的一个事情中，张三妈妈只是发布了一个声明，她并不关系张三如何去买的酱油，只是关心最后的结果。</p><p>所以说，所谓的声明式指的是：<code>不关注过程，只关注结果</code>的范式。</p><p>同样，如果我们通过代码来进行表示的话，以下例子：</p><blockquote><p>为指定的的div的子元素的子元素p标签，展示变量msg</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>再这样的代码中，我们完全不关心 msg 是怎么渲染到 p 标签的，我们所关心的只是：在 p 标签中，渲染指定文本而已。</p><p>最后做一个总结，什么叫做声明式呢？</p><p>声明式是：<code>关注结果</code>的一种编程范式，它<code>并不关心</code>完成一个功能的<code>详细逻辑与步骤</code>。(注意：这并不意味着声明式不需要过程！声明式只是把过程进行了隐藏而已！)</p><h4 id="命令式vs声明式" tabindex="-1">命令式vs声明式 <a class="header-anchor" href="#命令式vs声明式" aria-label="Permalink to &quot;命令式vs声明式&quot;">​</a></h4><p>在我们了解了命令式与声明式之后，对比这两种编程范哪一种比较好？</p><p>通常情况下，我们评价一个编程范式通常会从两个方面入手：</p><ol><li>性能</li><li>可维护性</li></ol><p>那么接下来我们就通过这两个方面，来分析一下命令式和声明式。</p><h5 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h5><p>性能一直是我们在进行项目开发时特别关注的方向，那么我们通常如何来表述一个功能的性能好坏呢？</p><p>我们来看一个例子：</p><blockquote><p>为指定 div 设置文本为 &quot;hello world&quot;</p></blockquote><p>那么针对于这个需求而言，最简单的代码就是：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//耗时为1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你应该找不到比这个更简单的代码实现了。</p><p>那么此时我们把这个操作的<code>耗时</code>比作:1。（ps：<code>耗时越少，性能越强</code>）</p><p>然后我们来看声明式，声明式的代码为：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//耗时为1+n  将msg修改为hello world</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  {{msg}}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>那么：<code>已知修改 text 最简单的方式是 innerText</code>,所以说无论声明式的代码是如何实现的文本切换，那么它的耗时一定是<code>&gt;1</code>的，我们把它比作<code>1+n（对比的性能消耗）</code></p><p>所以，由上所述得出的结论就是：<code>命令式的性能&gt;声明式的性能</code></p><h5 id="可维护性" tabindex="-1">可维护性 <a class="header-anchor" href="#可维护性" aria-label="Permalink to &quot;可维护性&quot;">​</a></h5><p>可维护性代表的维度非常多，但是通常情况下，所谓的可维护性指的是：针对代码可以方便的 <code>阅读、修改、删除、增加</code>。</p><p>那么想要达到这个目的，说白了就是：<code>代码的逻辑要足够简单</code>，让人一看就懂。</p><p>那么明确了这个概念，我们来看下命令式和声明式在同一段业务下的代码逻辑：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//命令式</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1.获取到第一层的 div</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> divEle</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 获取它的子 div</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> subDivEle</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">divEle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. 获取第三层的 p</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> subPEle</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">subDivEle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 4. 定义变量msg</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 5. 为该 p 元素设置innerHtML 为 hello world</span></span>
<span class="line"><span style="color:#A6ACCD;">subPEle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHtML</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">msg</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//声明式</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>对于以上代码而言，<code>声明式</code>的代码明显更加利于阅读，所以也更加利于维护。</p><p>所以，由上举例可知：<code>命令式的可维护性&lt;声明式的可维护性</code></p>`,66),o=[e];function c(t,r,i,D,y,F){return n(),a("div",null,o)}const u=s(p,[["render",c]]);export{b as __pageData,u as default};
