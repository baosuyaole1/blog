import{_ as e,c as o,o as t,N as l}from"./chunks/framework.294d0221.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"view/vue3源码解析/vue3框架设计的基本概念2.md"}'),p={name:"view/vue3源码解析/vue3框架设计的基本概念2.md"},i=l('<h3 id="为什么说框架的设计过程其实是一个不断取舍的过程" tabindex="-1">为什么说框架的设计过程其实是一个不断取舍的过程？ <a class="header-anchor" href="#为什么说框架的设计过程其实是一个不断取舍的过程" aria-label="Permalink to &quot;为什么说框架的设计过程其实是一个不断取舍的过程？&quot;">​</a></h3><p>vue 作者尤雨溪再一次演讲中说道：<code>框架的设计过程其实是一个不断取舍的过程</code></p><p>这代表的是什么意思呢？</p><p>想要搞明白这个，那么再来明确一下之前说过的概念：</p><ol><li>命令式的性能&gt;声明式的性能</li><li>命令式的可维护性&lt;声明式的可维护性</li><li>声明式的框架本质上是由命令式的代码去实现的</li><li>企业项目开发时，大多使用声明式框架</li></ol><p>当我们明确好了这样的一个问题之后，那我们接下来思考一个问题：<code>框架的开发与设计原则是什么呢？</code></p><p>我们知道对于Vue而言，当我们使用它的是通过 <code>声明式</code> 的方式进行性使用，但是对于vue内部而言，是通过 <code>命令式</code> 来进行实现。</p><p>所以我们可以理解为：<code>Vue封装了命令式的逻辑，而对外暴露了声明式的接口</code></p><p>那么既然如此，我们明知<code>命令式的性能&gt;声明式的性能。</code>那么Vue为什么还要选择声明式的方案呢？</p><p>其实原因非常的简单，那就是因为：<code>命令式的可维护性&lt;声明式的可维护性</code>。</p><blockquote><p>为指定的div的子元素div的子元素p标签，展示变量msg</p></blockquote><p>以这个例子为例</p><p>对于开发者而言，不需要关注实现过程，只需要关注最终的结果即可。</p><p>而对于Vue而言，他所需要走的就是：封装命令式逻辑，同时 <code>尽可能的减少性能损耗！</code>它需要在<code>性能</code>与<code>可维护性</code>之间，找到一个平衡。从而找到一个<code>可维护性更好，性能相对更优</code>的一个点。</p><p>所以对于Vue而言，它的设计原则就是：<code>在保证可维护性的基础上，尽可能的减少性能的损耗</code>。</p><h3 id="vue中的html是真实的html吗" tabindex="-1">.Vue中的html是真实的html吗？ <a class="header-anchor" href="#vue中的html是真实的html吗" aria-label="Permalink to &quot;.Vue中的html是真实的html吗？&quot;">​</a></h3><p>答案是：不是的。</p><p>原因很简单，如果我们写入的是真实的html节点，对于v-if v-bind keep-alive 这些东西，浏览器明显是<strong>不认识的</strong> ，所以这些东西理应无法解析。</p><p>但是现实是这些指令或组件被正确解析了，所以<strong>Vue一定做了什么</strong>，<strong>让假的html标签节点</strong>被渲染成了<strong>真实的html标签节点</strong>。</p><p>那么vue在中间做了什么呢？</p><p>简单的可以分为两件事（排序按执行顺序）：</p><ol><li>编译时：compiler</li><li>运行时：runtime</li></ol><p>这两个东西对于大家而言应该不陌生，在vue官网中早就提到了这几个概念。</p><p>这些概念一共有三个：</p><ol><li>运行时：runtime</li><li>编译时：compiler</li><li>运行时+编译时：runtime+compiler</li></ol><h3 id="什么是运行时" tabindex="-1">什么是运行时 <a class="header-anchor" href="#什么是运行时" aria-label="Permalink to &quot;什么是运行时&quot;">​</a></h3>',26),c=[i];function a(d,r,n,s,_,u){return t(),o("div",null,c)}const v=e(p,[["render",a]]);export{m as __pageData,v as default};
